<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.platform.dao.UpkeepDao">

   <!-- <resultMap type="com.platform.entity.UpkeepEntity" id="UpKeepMap">
        <result property="id" column="id"/>
        <result property="customerId" column="customer_id"/>
        <result property="utime" column="u_time"/>
        <result property="ctype" column="ctype"/>
        <result property="gift" column="gift"/>
        <result property="uid" column="uid"/>
    </resultMap>-->

    <select id="queryObject" resultType="com.platform.entity.UpkeepEntity">
		select
			id as id,
			customer_id as customerId,
			u_time as utime,
			c_type as ctype ,
			gift_price as giftPrice,
			place as place,
			status as status,
			u_id as uid,
			data_from as dataFrom
		from nideshop_upkeep
		where id = #{id}



	</select>
    <select id="queryList" resultType="com.platform.entity.UpkeepEntity">
        select
        id as id,
        customer_id as customerId,
        u_time as utime,
        c_type as ctype ,
        gift_price as giftPrice,
        place as place,
        status as status,
        u_id as uid,
        data_from as dataFrom
        from nideshop_upkeep
        <where>
            <if test="id != null">
                and id = #{id}
            </if>
            <if test="customerId != null">
                and customer_id = #{customerId}
            </if>
        </where>
        <choose>
            <when test="sidx != null and sidx.trim() != ''">
                order by ${sidx} ${order}
            </when>
            <otherwise>
                order by id desc
            </otherwise>
        </choose>
        <if test="offset != null and limit != null">
            limit #{offset}, #{limit}
        </if>
    </select>
    <select id="queryTotal" resultType="int">
        select count(*) from nideshop_upkeep
        <where>
            <if test="id != null">
                and id = #{id}
            </if>
            <if test="customerId != null">
                and customer_id = #{customerId}
            </if>
        </where>
        <choose>
            <when test="sidx != null and sidx.trim() != ''">
                order by ${sidx} ${order}
            </when>
            <otherwise>
                order by id desc
            </otherwise>
        </choose>
        <if test="offset != null and limit != null">
            limit #{offset}, #{limit}
        </if>
    </select>

    <insert id="save" parameterType="com.platform.entity.UpkeepEntity" useGeneratedKeys="true" keyProperty="id">
		insert into nideshop_upkeep(
			`customer_id`,
			`c_type`,
			`gift_price`,
			`u_id`,
			`data_from`,
			`place`,
			`status`
			)
		values(
			#{customerId},
			#{ctype},
			#{giftPrice},
			#{uid},
			#{dataFrom},
			#{place},
			#{status}
			)
	</insert>

    <update id="update" parameterType="com.platform.entity.UpkeepEntity">
        update nideshop_upkeep
        <set>
            <if test="customerId != null">`customer_id` = #{customerId},</if>
            <if test="ctype != null">`c_type` = #{ctype},</if>
            <if test="giftPrice != null">`gift_price` = #{giftPrice},</if>
            <if test="uid != null">`u_id` = #{uid},</if>
            <if test="dataFrom != null">`data_from` = #{dataFrom},</if>
            <if test="place != null">`place` = #{place},</if>
            <if test="status != null">`status` = #{status},</if>
        </set>
        where id = #{id}
    </update>

    <delete id="delete">
		delete from nideshop_upkeep where id = #{value}
	</delete>

    <delete id="deleteBatch">
        delete from nideshop_upkeep where id in
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

</mapper>