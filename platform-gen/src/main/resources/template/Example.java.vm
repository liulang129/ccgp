package ${package}.entity.example;

import java.io.Serializable;
import java.util.Date;
import java.util.List;

#if(${hasBigDecimal})
import java.math.BigDecimal;
#end
/**
 * ${comments}实体
 * 表名 ${tableName}
 *
 * @author xuyang
 * @email 295640759@qq.com
 * @date ${datetime}
 */
public class ${className}Example extends AbstractExample  {
    private static final long serialVersionUID = 1L;

    @Override
    public Criteria or() {
        return (Criteria)super.or();
    }

    @Override
    public Criteria createCriteria() {
        return (Criteria)super.createCriteria();
    }

    @Override
    protected Criteria createCriteriaInternal() {
        return new Criteria();
    }

    public class Criteria extends GeneratedCriteria {
        protected Criteria() {
            super();
        }

#foreach ($column in $columns)
    #if($column.columnName != 'id' && $column.columnName != 'create_id' &&
        $column.columnName != 'update_id' && $column.columnName != 'create_time' &&
        $column.columnName != 'update_time')
        public Criteria and${column.attrName}IsNull() {
            addCriterion("${column.columnName} is null");
            return (Criteria) this;
        }

        public Criteria and${column.attrName}IsNotNull() {
            addCriterion("${column.columnName} is not null");
            return (Criteria) this;
        }

        public Criteria and${column.attrName}EqualTo($column.attrType value) {
            addCriterion("${column.columnName} =", value, "$column.attrname");
            return (Criteria) this;
        }

        public Criteria and${column.attrName}NotEqualTo($column.attrType value) {
            addCriterion("${column.columnName} <>", value, "$column.attrname");
            return (Criteria) this;
        }

        public Criteria and${column.attrName}GreaterThan($column.attrType value) {
            addCriterion("${column.columnName} >", value, "$column.attrname");
            return (Criteria) this;
        }

        public Criteria and${column.attrName}GreaterThanOrEqualTo($column.attrType value) {
            addCriterion("${column.columnName} >=", value, "$column.attrname");
            return (Criteria) this;
        }

        public Criteria and${column.attrName}LessThan($column.attrType value) {
            addCriterion("${column.columnName} <", value, "$column.attrname");
            return (Criteria) this;
        }

        public Criteria and${column.attrName}LessThanOrEqualTo($column.attrType value) {
            addCriterion("${column.columnName} <=", value, "$column.attrname");
            return (Criteria) this;
        }
    #if($column.attrType == 'String')
        public Criteria and${column.attrName}Like($column.attrType value) {
            addCriterion("${column.columnName} like", value, "$column.attrname");
            return (Criteria) this;
        }

        public Criteria and${column.attrName}NotLike($column.attrType value) {
            addCriterion("${column.columnName} not like", value, "$column.attrname");
            return (Criteria) this;
        }
    #end
        public Criteria and${column.attrName}In(List<$column.attrType> values) {
            addCriterion("${column.columnName} in", values, "$column.attrname");
            return (Criteria) this;
        }

        public Criteria and${column.attrname}NotIn(List<$column.attrType> values) {
            addCriterion("${column.columnName} not in", values, "$column.attrname");
            return (Criteria) this;
        }

        public Criteria and${column.attrName}Between($column.attrType value1, $column.attrType value2) {
            addCriterion("${column.columnName} between", value1, value2, "$column.attrname");
            return (Criteria) this;
        }

        public Criteria and${column.attrName}NotBetween($column.attrType value1, $column.attrType value2) {
            addCriterion("${column.columnName} not between", value1, value2, "$column.attrname");
            return (Criteria) this;
        }
#end
#end
    }
}
